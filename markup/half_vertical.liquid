<div class="layout layout--col">
  {% if error != null %}
  <span class="title">An error occurred while accessing the API:</span>
  <span>{{ error }}</span>
  {% elsif results == null %}
  <span class="title">The URL could not be reached. Check if your settings are correct.</span>
  {% else %}
  <div class="flex flex--col w--full h--full">
    <div class="flex flex--col w--full h--full" style="flex: 1;overflow:hidden;">
      <div id="chart-8513af80da0f" class="w--full h--full" data-highcharts-chart="0" style="overflow: hidden;"></div>
 
      {% if trmnl.plugin_settings.custom_fields_values.chart_only == "yes" %}
      <div class="flex row flex--center gap px--2">
        <div class="item item--emphasis-3 w--auto">
          <div class="meta"></div>
          <div class="content">
            <span class="value value--xsmall value--tnums" data-value-type="date">
              <span id="min-date" class="label"></span> - <span id="max-date" class="label"></span>
            </span>
          </div>
        </div>
        <div class="grow"></div>

        {% assign metrics = trmnl.plugin_settings.custom_fields_values.metric %}
        {% assign chart_for = trmnl.plugin_settings.custom_fields_values.chart_for | plus: 0 %}
        {% assign chart_for2 = trmnl.plugin_settings.custom_fields_values.chart_for2 | plus: 0 %}
        {% assign main_metric = metrics[chart_for] %}
        {% assign secondary_metric = metrics[chart_for2] %}

        <div class="item item--emphasis-3 w--auto">
          <div class="meta"></div>
          <div class="content">
            <span class="value value--xsmall value--tnums" data-value-type="date">
              <span class="label" id="chart-1-label"></span>
            </span>
          </div>
        </div>
        {% if chart_for2 != null and chart_for != chart_for2 %}
        <div class="item item--emphasis-2 w--auto">
          <div class="meta"></div>
          <div class="content">
            <span class="value value--xsmall value--tnums" data-value-type="date">
              <span class="label" id="chart-2-label"></span>
            </span>
          </div>
        </div>
        {% endif %}
      </div>
      {% else %}
      <div class="flex flex--col flex--wrap flex--start flex--left w--full h--44">


        {% assign metrics = trmnl.plugin_settings.custom_fields_values.metric %}
        {% assign chart_for = trmnl.plugin_settings.custom_fields_values.chart_for | plus: 0 %}
        {% assign chart_for2 = trmnl.plugin_settings.custom_fields_values.chart_for2 | plus: 0 %}
        {% assign main_metric = metrics[chart_for] %}

        <!-- Main metric -->
        <div class="item item--emphasis-3 w--auto">
          <div class="meta"></div>
          <div class="content">
            <span class="value value--tnums" id="sum-value-{{ main_metric }}"></span>
            <span class="label" id="label-{{ main_metric }}"></span>
          </div>
        </div>

        {% if chart_for2 != null and chart_for != chart_for2 %}
        {% assign secondary_metric = metrics[chart_for2] %}
        <div class="item item--emphasis-2 w--auto stretch">
          <div class="meta"></div>
          <div class="content">
            <span class="value value--tnums" id="sum-value-{{ secondary_metric }}"></span>
            <span class="label" id="label-{{ secondary_metric }}"></span>
          </div>
        </div>
        {% endif %}

        <div class="item item--emphasis-3 w--auto">
          <div class="meta"></div>
          <div class="content">
            <span class="value value--xsmall value--tnums" data-value-type="date">
              <span id="min-date" class="label"></span> - <span id="max-date" class="label"></span>
            </span>
          </div>
        </div>

        {% assign i = 0 %}
        {% for metric in metrics %}
        {% if metric != metrics[chart_for] and metric != metrics[chart_for2] and i < 3  %}
          <div class="item w--auto shrink m--0">
            <div class="meta"></div>
            <div class="content">
              <span class="value value--small value--tnums" id="sum-value-{{ metric }}"></span>
              <span class="label" id="label-{{ metric }}"></span>
            </div>
          </div>
          {% assign i = i | plus:1 %}
          {% endif %}
          {% endfor %}
      </div>
      {% endif %}
    </div>

    <script src="https://usetrmnl.com/js/highcharts/12.3.0/highcharts.js"></script>
    <script src="https://usetrmnl.com/js/highcharts/12.3.0/highcharts-more.js"></script>
    <script src="https://usetrmnl.com/js/highcharts/12.3.0/pattern-fill.js"></script>

    <script type="text/javascript">
      // --- Metric map (labels, units, aggregation) ---
      // Add more entries here if you introduce new metrics.
      const METRIC_META = {
        visitors:       { label: 'Unique visitors',   agg: 'sum',           unit: ''  },
        visits:         { label: 'Visits',            agg: 'sum',           unit: ''  },
        pageviews:      { label: 'Pageviews',         agg: 'sum',           unit: ''  },
        events:         { label: 'Events',            agg: 'sum',           unit: ''  },
        bounce_rate:    { label: 'Bounce rate',       agg: 'weighted_avg',  unit: '%',  weight_by: 'pageviews' },
        visit_duration: { label: 'Visit duration',    agg: 'weighted_avg',  unit: 's',  weight_by: 'visitors'  }
      };

      // Helpers
      function prettify(id) {
        return id.replace(/_/g, ' ').replace(/\b\w/g, s => s.toUpperCase());
      }
      function labelFor(metric) {
        const meta = METRIC_META[metric] || {};
        const base = meta.label || prettify(metric);
        return base;
      }
      function inferredUnit(metric, metaUnit) {
        if (metaUnit) return metaUnit;
        if (/_rate$/i.test(metric)) return '%';
        if (/duration|time|seconds/i.test(metric)) return 's';
        return '';
      }
      function formatMetricValue(metric, value) {
        const unit = inferredUnit(metric, (METRIC_META[metric] || {}).unit);
        if (unit === '') {
          if (value > 1_000_000_000) {
            return `${(value/1_000_000_000).toFixed(1)}B`;
          }
          else if (value > 1_000_000) {
            return `${(value/1_000_000).toFixed(1)}M`;
          }
          else if (value > 1_000) {
            return `${(value/1_000).toFixed(1)}k`;
          }
        }
        else if (unit === '%') return `${value.toFixed(2)}%`;
        else if (unit === 's') {
          if (value > 3600) {
            let hours = Math.floor(value / 3600);
            let minutes = Math.floor(value / 60) - hours * 60;
            let seconds = Math.round(value % 60);
            return `${hours}h${minutes}m${seconds}s`
          }
          else if (value > 60) {
            let minutes = Math.floor(value / 60);
            let seconds = Math.round(value % 60);
            return `${minutes}m${seconds}s`
          }
          return `${Math.round(value).toLocaleString('en-US')}s`;
        }
        return Math.round(value).toLocaleString('en-US');
      }

      function valuePerMetric(metric, index, data, metricsList) {
        const meta = METRIC_META[metric] || { agg: 'sum' };

        if (meta.agg === 'sum') {
          return data.reduce((acc, item) => acc + item.metrics[index], 0);
        }
        if (meta.agg === 'avg') {
          const values = data.map(item => item.metrics[index]);
          const sum = values.reduce((a, b) => a + b, 0);
          return values.length ? sum / values.length : 0;
        }
        if (meta.agg === 'weighted_avg') {
          const weightIdx = meta.weight_by ? metricsList.indexOf(meta.weight_by) : -1;
          const pairs = data.map(item => ({
            v: item.metrics[index],
            w: weightIdx >= 0 ? item.metrics[weightIdx] : 1
          }));
          const weightedSum = pairs.reduce((a, p) => a + p.v * p.w, 0);
          const totalWeight = pairs.reduce((a, p) => a + p.w, 0);
          return totalWeight ? weightedSum / totalWeight : 0;
        }

        // Fallback
        return data.reduce((acc, item) => acc + item.metrics[index], 0);
      }

      function reformatResults(results, metricIndex) {
        return results.map(item => [
          item.dimensions[0],
          item.metrics[metricIndex]
        ]);
      }

      // Data from template
      let data = {{ results | json }};
      let metrics = {{ trmnl.plugin_settings.custom_fields_values.metric | json }};
      let chartFor = {{ chart_for | json }};
      let chartFor2 = {{ trmnl.plugin_settings.custom_fields_values.chart_for2 | json }};
      let mainMetric = metrics[chartFor];
      let queryObj = {{ query | json }};
      let groupBy = queryObj.dimensions[0];
      const groupPrefix = (groupBy || '').toLowerCase();
      const isTimeQuery = groupPrefix.startsWith('time');
      const isVisitQuery = groupPrefix.startsWith('visit');

      // Fill metric labels
      metrics.forEach((metric) => {
        const el = document.getElementById('label-' + metric);
        if (el) el.innerText = labelFor(metric);
      });

      // Fill metric values
      metrics.forEach((metric, i) => {
        const el = document.getElementById('sum-value-' + metric);
        if (!el) return;
        const value = valuePerMetric(metric, i, data, metrics);
        el.innerText = formatMetricValue(metric, value);
      });

      // Date range (only for time queries)
      const dateBlock = document.getElementById('date-range-block');
      if (isTimeQuery) {
        let minDate = Math.min(...data.map(item => new Date(item.dimensions[0]).getTime()));
        let showYear = new Date().getFullYear() !== new Date(minDate).getFullYear()
        let maxDate = Math.max(...data.map(item => new Date(item.dimensions[0]).getTime()));
        document.getElementById('min-date').innerText = new Date(minDate).toLocaleDateString('en-US', { year: showYear ? "2-digit" : undefined, month: 'short', day: 'numeric' });
        document.getElementById('max-date').innerText = new Date(maxDate).toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
        let minDate2 = document.getElementById('min-date2');
        if (minDate2) minDate2.innerText = new Date(minDate).toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
        let maxDate2 = document.getElementById('max-date2');
        if (maxDate2) maxDate2.innerText = new Date(maxDate).toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
        if (dateBlock) dateBlock.style.display = '';
      } else {
        let minDate = queryObj.date_range[0];
        let maxDate = queryObj.date_range[1];
        let showYear = new Date().getFullYear() !== new Date(minDate).getFullYear()
        document.getElementById('min-date').innerText = new Date(minDate).toLocaleDateString('en-US', { year: showYear ? "2-digit" : undefined, month: 'short', day: 'numeric' });
        document.getElementById('max-date').innerText = new Date(maxDate).toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
        if (dateBlock) dateBlock.style.display = '';
      }

      // Chart data + type
      const chartType = isVisitQuery ? 'column' : 'spline';

      let chart_data = isTimeQuery
        ? reformatResults(data, chartFor)
        : data.map(item => [String(item.dimensions[0]), item.metrics[chartFor]]); // category points

      // --- SECOND SERIES (optional) ---
      // Draw if chartFor2 is provided and different from the main selection
      const hasSecond =
        chartFor2 !== null &&
        chartFor2 !== undefined &&
        chartFor2 !== '' &&
        Number.isFinite(+chartFor2) &&
        +chartFor2 >= 0 &&
        +chartFor2 < metrics.length &&
        +chartFor2 !== +chartFor;

       let chartOnly = {{ trmnl.plugin_settings.custom_fields_values.chart_only | json }};
      if (chartOnly === "yes") {
        document.getElementById('chart-1-label').innerText = METRIC_META[metrics[chartFor]].label;
        if (hasSecond) {
          document.getElementById('chart-2-label').innerText = METRIC_META[metrics[chartFor2]].label;
        }
      }

      let secondMetric = null;
      let chart_data2 = null;
      if (hasSecond) {
        chartFor2 = +chartFor2;
        secondMetric = metrics[chartFor2];
        chart_data2 = isTimeQuery
          ? reformatResults(data, chartFor2)
          : data.map(item => [String(item.dimensions[0]), item.metrics[chartFor2]]);
      }

      // Axis config swaps between datetime and category
      const xAxisConfig = isTimeQuery
        ? {
          type: 'datetime',
          labels: { style: { fontSize: '16px', color: '#000000' }, padding: 5, y: 25 },
          lineWidth: 0,
          gridLineDashStyle: 'dot',
          tickWidth: 1,
          tickLength: 0,
          gridLineWidth: 1,
          gridLineColor: '#000000',
          tickPixelInterval: 120,
          offset: 0,
          margin: 0,
          title: { text: null }
        }
        : {
          type: 'category',
          labels: { style: { fontSize: '16px', color: '#000000' } },
          lineWidth: 0,
          gridLineDashStyle: 'dot',
          tickLength: 0,
          gridLineWidth: 1,
          gridLineColor: '#000000',
          title: { text: null }
        };

      // --- yAxis: left for main; optional right for secondary ---
      const yAxisLeft = {
        labels: { style: { fontSize: '16px', color: '#000000' } },
        gridLineDashStyle: 'shortdot',
        gridLineWidth: 1,
        gridLineColor: '#000000',
        tickAmount: 5,
        title: { text: null }
      };
      const yAxisRight = {
        labels: { style: { fontSize: '16px', color: '#000000' } },
        gridLineWidth: 0,        // keep gridlines from the left axis only
        tickAmount: 5,
        title: { text: null },
        opposite: true
        // If you want a mirrored scale instead, uncomment:
        // , linkedTo: 0
      };
      const yAxisConfig = hasSecond ? [yAxisLeft, yAxisRight] : yAxisLeft;

      // --- Series config ---
      const seriesConfig = [
        { data: chart_data, type: chartType, lineWidth: 4, color: '#000000', name: labelFor(mainMetric), zIndex: 2, yAxis: 0 }
      ];
      if (hasSecond) {
        seriesConfig.push({
          data: chart_data2,
          type: chartType,
          // lighter color for secondary series
          color: {
            pattern: {
              image: "https://usetrmnl.com/images/grayscale/gray-4.png",
              width: 12,
              height: 12
            }
          },
          lineWidth: 4,
          name: labelFor(secondMetric),
          zIndex: 1,
          yAxis: 1
        });
      }

      Highcharts.chart('chart-8513af80da0f', {
        chart: { type: chartType, width: null, animation: false, spacing: [5,0,0,0] },
        title: { text: null },
        plotOptions: {
          series: {
            animation: false,
            enableMouseTracking: false,
            states: { hover: { enabled: false } },
          marker: { enabled: true, radius: 1 }
          },
          column: { pointPadding: 0.1, borderWidth: 0 }
        },
        series: seriesConfig,
        tooltip: { enabled: false },
        legend: { enabled: false },
        yAxis: yAxisConfig,
        xAxis: xAxisConfig,
        credits: { enabled: false }
      });
    </script>
  </div>
  {% endif %}
</div>
<div class="title_bar w--full">
  <svg class="image" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 60 60"><g id="Plausible_-_Branding"><g id="Symbol_-_Purple_Gradient"><path class="cls-1" d="M45.2456059,22.6027536c-1.0911024,10.4557623-10.2327486,18.2272825-20.7452872,18.2272807h-4.047804v9.570007c0,5.3019285-4.2980623,9.5999908-9.5999908,9.5999908H3.3599854c-1.8556687,0-3.3599854-1.5043167-3.3599854-3.3599854v-19.7025146l5.0380685-7.0686343c.9118097-1.2793096,2.587965-1.7566996,4.0369945-1.1497867l2.8657142,1.2002785c1.4444817.6050081,3.1153774.12945,4.0247968-1.1455083l6.7172007-9.417163c.9071158-1.2717288,2.5743943-1.7450816,4.0144283-1.1397262l5.5198678,2.3204187c1.4430268.6066135,3.1137697.1319561,4.0223175-1.1427389l6.4594145-9.0625757c2.0248091,3.5597961,3.0145069,7.7887694,2.5468032,12.2706573Z"/><path class="cls-2" d="M3.2920959,28.8726296c.82329-1.1551271,2.0209115-2.0434967,3.4138697-2.3114381,1.0861554-.2089265,2.156905-.0992829,3.1472499.3155174l2.8649902,1.1999512c.1651001.0691528.3388672.104187.5164795.104187.4365845,0,.8488159-.2124634,1.1026611-.5683594l6.5942097-9.2447929c.8231505-1.154021,2.0204067-2.0410099,3.4124878-2.3083136,1.0821376-.2077892,2.1463585-.0989034,3.1282512.3138487l5.5198364,2.3204346c.1665649.0700684.3417969.1055298.5206909.1055298.4351807,0,.8456421-.2113647,1.0979614-.5653687l6.9192505-9.7077637C37.8272145,3.3644409,31.7802174,0,24.9450124,0H3.3599904C1.5043217,0,.000005,1.5043167.000005,3.3599854v30.1316528l3.2920909-4.6190085Z"/></g></g></svg>
  <span class="title">{{ trmnl.plugin_settings.instance_name }}</span>
  <span class="instance">
    {% if trmnl.plugin_settings.custom_fields_values.site_display != null %}
    {{ trmnl.plugin_settings.custom_fields_values.site_display }}
    {% else %}
    {{ trmnl.plugin_settings.custom_fields_values.site_id }}
    {% endif %}
  </span>
</div>
